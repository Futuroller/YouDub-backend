generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model access_statuses {
  id        Int         @id(map: "access_pk") @default(autoincrement())
  name      String      @db.VarChar(50)
  playlists playlists[]
  videos    videos[]
}

model comments {
  id           Int      @id(map: "comments_pk") @default(autoincrement())
  comment_text String   @db.VarChar
  comment_date DateTime @db.Timestamp(6)
  likes        BigInt?
  dislikes     BigInt?
  id_user      Int
  id_video     Int
  users        users    @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_users_fk")
  videos       videos   @relation(fields: [id_video], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_videos_fk")
}

model history {
  id               Int      @id(map: "history_pk") @default(autoincrement())
  id_user          Int
  id_video         Int
  progress_percent Int?
  watched_at       DateTime @db.Timestamp(6)
  users            users    @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "history_users_fk")
  videos           videos   @relation(fields: [id_video], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "history_videos_fk")
}

model playlist_videos {
  id          Int       @id(map: "playlist_videos_pk") @default(autoincrement())
  id_playlist Int
  id_video    Int
  playlists   playlists @relation(fields: [id_playlist], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "playlist_videos_playlists_fk")
  videos      videos    @relation(fields: [id_video], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "playlist_videos_videos_fk")
}

model playlists {
  id              Int               @id(map: "playlists_pk") @default(autoincrement())
  name            String            @db.VarChar(150)
  description     String?           @db.VarChar
  url             String            @unique(map: "playlists_unique") @db.VarChar
  views           BigInt?
  likes           BigInt?
  dislikes        BigInt?
  id_user         Int
  id_access       Int
  playlist_videos playlist_videos[]
  access_statuses access_statuses   @relation(fields: [id_access], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playlists_access_statuses_fk")
  users           users             @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "playlists_users_fk")
}

model roles {
  id    Int     @id(map: "roles_pk") @default(autoincrement())
  name  String  @unique(map: "roles_unique") @db.VarChar(50)
  users users[]
}

model subscriptions {
  id                                            Int      @id(map: "subscriptions_pk") @default(autoincrement())
  id_subscriber                                 Int
  id_subscribed_user                            Int
  subscribed_at                                 DateTime @db.Timestamp(6)
  users_subscriptions_id_subscriberTousers      users    @relation("subscriptions_id_subscriberTousers", fields: [id_subscriber], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscriptions_users_fk")
  users_subscriptions_id_subscribed_userTousers users    @relation("subscriptions_id_subscribed_userTousers", fields: [id_subscribed_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscriptions_users_fk_1")
}

model tags {
  id         Int          @id(map: "tags_pk") @default(autoincrement())
  name       String       @unique(map: "tags_unique") @db.VarChar(100)
  video_tags video_tags[]
}

model users {
  id                                                    Int             @id(map: "users_pk") @default(autoincrement())
  username                                              String          @db.VarChar(50)
  registration_date                                     DateTime        @db.Timestamp(6)
  email                                                 String          @unique(map: "users_unique") @db.VarChar(50)
  password_hash                                         String          @db.VarChar(255)
  avatar_url                                            String?         @db.VarChar
  is__activated                                         Boolean         @default(false) @map("is\u001f_activated")
  activation_link                                       String?         @db.VarChar
  id_role                                               Int
  description                                           String?         @db.VarChar
  subscribers_count                                     BigInt?
  is_banned                                             Boolean         @default(false)
  ban_reason                                            String?         @db.VarChar
  channel_header_url                                    String?         @db.VarChar
  comments                                              comments[]
  history                                               history[]
  playlists                                             playlists[]
  subscriptions_subscriptions_id_subscriberTousers      subscriptions[] @relation("subscriptions_id_subscriberTousers")
  subscriptions_subscriptions_id_subscribed_userTousers subscriptions[] @relation("subscriptions_id_subscribed_userTousers")
  roles                                                 roles           @relation(fields: [id_role], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_roles_fk")
  videos                                                videos[]

  @@index([id, username, email, password_hash, registration_date, avatar_url, channel_header_url, description, subscribers_count, is__activated, activation_link, is_banned, ban_reason, id_role], map: "users_id_idx")
}

model video_tags {
  id       Int    @id(map: "video_tags_pk") @default(autoincrement())
  id_video Int
  id_tag   Int
  tags     tags   @relation(fields: [id_tag], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "video_tags_tags_fk")
  videos   videos @relation(fields: [id_video], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "video_tags_videos_fk")
}

model videos {
  id              Int               @id(map: "videos_pk") @default(autoincrement())
  name            String            @db.VarChar(150)
  description     String?           @db.VarChar
  url             String            @unique(map: "videos_unique") @db.VarChar
  load_date       DateTime          @db.Timestamp(6)
  views           BigInt?
  likes           BigInt?
  dislikes        BigInt?
  id_owner        Int
  id_access       Int
  comments        comments[]
  history         history[]
  playlist_videos playlist_videos[]
  video_tags      video_tags[]
  access_statuses access_statuses   @relation(fields: [id_access], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "videos_access_statuses_fk")
  users           users             @relation(fields: [id_owner], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "videos_users_fk")
}

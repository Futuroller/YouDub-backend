generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model access_statuses {
  id        Int         @id(map: "access_pk") @default(autoincrement())
  name      String      @db.VarChar(50)
  playlists playlists[]
  videos    videos[]
}

model comments {
  id                    Int                     @id(map: "comments_pk") @default(autoincrement())
  comment_text          String                  @db.VarChar
  comment_date          DateTime                @db.Timestamp(6)
  id_user               Int
  id_video              Int
  users                 users                   @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_users_fk")
  videos                videos                  @relation(fields: [id_video], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_videos_fk")
  user_comment_reaction user_comment_reaction[]
}

model history {
  id               Int        @id(map: "history_pk") @default(autoincrement())
  id_user          Int
  id_video         Int
  progress_percent Int?
  watched_at       DateTime   @db.Timestamp(6)
  id_reaction      Int?
  reactions        reactions? @relation(fields: [id_reaction], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "history_reactions_fk")
  users            users      @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "history_users_fk")
  videos           videos     @relation(fields: [id_video], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "history_videos_fk")

  @@unique([id_user, id_video], map: "id_user_id_video")
}

model playlist_videos {
  id          Int       @id(map: "playlist_videos_pk") @default(autoincrement())
  id_playlist Int
  id_video    Int
  date_added  DateTime  @db.Timestamp(6)
  playlists   playlists @relation(fields: [id_playlist], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "playlist_videos_playlists_fk")
  videos      videos    @relation(fields: [id_video], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "playlist_videos_videos_fk")

  @@unique([id_playlist, id_video], map: "id_playlist_id_video")
}

model playlists {
  id              Int               @id(map: "playlists_pk") @default(autoincrement())
  name            String            @db.VarChar(150)
  description     String?           @db.VarChar
  url             String            @unique(map: "playlists_unique") @db.VarChar
  id_user         Int
  id_access       Int
  creation_date   DateTime          @db.Timestamp(6)
  playlist_videos playlist_videos[]
  access_statuses access_statuses   @relation(fields: [id_access], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playlists_access_statuses_fk")
  users           users             @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "playlists_users_fk")
}

model roles {
  id    Int     @id(map: "roles_pk") @default(autoincrement())
  name  String  @unique(map: "roles_unique") @db.VarChar(50)
  users users[]
}

model subscriptions {
  id                                       Int      @id(map: "subscriptions_pk") @default(autoincrement())
  id_subscriber                            Int
  id_channel                               Int
  subscribed_at                            DateTime @db.Timestamp(6)
  users_subscriptions_id_subscriberTousers users    @relation("subscriptions_id_subscriberTousers", fields: [id_subscriber], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscriptions_users_fk")
  users_subscriptions_id_channelTousers    users    @relation("subscriptions_id_channelTousers", fields: [id_channel], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscriptions_users_fk_1")

  @@unique([id_subscriber, id_channel], map: "id_subscriber_id_channel")
}

model tags {
  id         Int          @id(map: "tags_pk") @default(autoincrement())
  name       String       @unique(map: "tags_unique") @db.VarChar(100)
  video_tags video_tags[]
}

model users {
  id                                               Int                     @id(map: "users_pk") @default(autoincrement())
  username                                         String                  @db.VarChar(50)
  registration_date                                DateTime                @db.Timestamp(6)
  email                                            String                  @unique(map: "users_unique") @db.VarChar(50)
  password_hash                                    String                  @db.VarChar(255)
  avatar_url                                       String?                 @db.VarChar
  is__activated                                    Boolean                 @default(false) @map("is\u001f_activated")
  activation_link                                  String?                 @db.VarChar
  id_role                                          Int
  description                                      String?                 @db.VarChar
  is_banned                                        Boolean                 @default(false)
  ban_reason                                       String?                 @db.VarChar
  channel_header_url                               String?                 @db.VarChar
  tagname                                          String                  @unique(map: "unique_tagname") @db.VarChar
  comments                                         comments[]
  favorite_categories                              favorite_categories[]
  history                                          history[]
  playlists                                        playlists[]
  subscriptions_subscriptions_id_subscriberTousers subscriptions[]         @relation("subscriptions_id_subscriberTousers")
  subscriptions_subscriptions_id_channelTousers    subscriptions[]         @relation("subscriptions_id_channelTousers")
  user_comment_reaction                            user_comment_reaction[]
  roles                                            roles                   @relation(fields: [id_role], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_roles_fk")
  videos                                           videos[]
}

model video_tags {
  id       Int    @id(map: "video_tags_pk") @default(autoincrement())
  id_video Int
  id_tag   Int
  tags     tags   @relation(fields: [id_tag], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "video_tags_tags_fk")
  videos   videos @relation(fields: [id_video], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "video_tags_videos_fk")

  @@unique([id_video, id_tag], name: "id_video_id_tag", map: "id_video_id_tag")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model videos {
  id              Int               @id(map: "videos_pk") @default(autoincrement())
  name            String            @db.VarChar(150)
  description     String?           @db.VarChar
  url             String            @unique(map: "videos_unique") @db.VarChar
  load_date       DateTime          @db.Timestamp(6)
  id_owner        Int
  id_access       Int
  preview_url     String?           @db.VarChar
  id_category     Int
  comments        comments[]
  history         history[]
  playlist_videos playlist_videos[]
  video_tags      video_tags[]
  access_statuses access_statuses   @relation(fields: [id_access], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "videos_access_statuses_fk")
  categories      categories        @relation(fields: [id_category], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "videos_categories_fk")
  users           users             @relation(fields: [id_owner], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "videos_users_fk")
}

model categories {
  id                  Int                   @id(map: "categories_pk") @default(autoincrement())
  name                String                @unique(map: "categories_unique") @db.VarChar
  favorite_categories favorite_categories[]
  videos              videos[]
}

model favorite_categories {
  id          Int        @id(map: "favorite_categories_pk") @default(autoincrement())
  id_user     Int
  id_category Int
  categories  categories @relation(fields: [id_category], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorite_categories_categories_fk")
  users       users      @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorite_categories_users_fk")
}

model reactions {
  id                    Int                     @id(map: "reactions_pk") @default(autoincrement())
  type                  String                  @db.VarChar
  history               history[]
  user_comment_reaction user_comment_reaction[]
}

model user_comment_reaction {
  id          Int       @id(map: "user_comment_reaction_pk") @default(autoincrement())
  id_user     Int
  id_comment  Int
  id_reaction Int
  comments    comments  @relation(fields: [id_comment], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_comment_reaction_comments_fk")
  reactions   reactions @relation(fields: [id_reaction], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_comment_reaction_reactions_fk")
  users       users     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_comment_reaction_users_fk")

  @@unique([id_comment, id_user], map: "id_comment_id_user")
}
